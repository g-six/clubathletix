datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id                         String    @id @default(cuid())
  first_name                      String
  last_name                       String
  email                           String    @unique
  phone                           String
  hashed_password                 String
  role                            String?   @default("user")
  login_attempts                  Int?      @default(0)
  email_verified_at               DateTime?
  is_account_activated            Boolean?  @default(false)
  is_account_locked               Boolean?  @default(false)
  password_rest_token             String?
  registration_verification_token String?
  image                           String?

  activated_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  deleted_at   DateTime?

  created_by String?
  updated_by String?

  accounts      Account[]
  organizations UserOrganization[]
  parents       PlayerParent[]
  players       Player[]
  sessions      Session[]
  team_members  TeamMember[]
  // Optional for WebAuthn support
  authenticator Authenticator[]

  @@map("users")
}

model Account {
  account_id               String  @id @default(cuid())
  user_id                  String  @unique
  type                     String
  provider                 String
  provider_account_id      String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [user_id], references: [user_id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  session_id    String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [user_id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credential_id          String  @unique
  user_id                String
  provider_account_id    String
  credential_public_key  String
  counter                Int
  credential_device_type String
  credential_backed_up   Boolean
  transports             String?

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, credential_id])
  @@map("authenticators")
}

model Organization {
  organization_id    String @id @default(cuid())
  organization_type  String @default("academy")
  name               String
  contact_first_name String
  contact_last_name  String
  email              String
  phone              String
  logo               String?
  domain             String

  activated_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  created_by String
  updated_by String?

  League           League[]
  UserOrganization UserOrganization[]
  Player           Player[]
  Team             Team[]

  @@index([name, organization_type])
  @@index([domain])
  @@map("organizations")
}

model League {
  league_id       String @id @default(cuid())
  organization_id String

  name        String
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  description String?

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  organization Organization? @relation(fields: [league_id], references: [organization_id])
  teams         Team[]
  matches      Match[]

  @@index([name, organization_id])
  @@map("leagues")
}

model UserOrganization {
  user_id         String
  organization_id String
  role            String @default("admin")

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  user         User         @relation(fields: [user_id], references: [user_id])
  organization Organization @relation(fields: [organization_id], references: [organization_id])

  @@unique([user_id, organization_id])
  @@map("user_organizations")
}

model Player {
  player_id       String   @id @default(cuid())
  user_id         String?
  organization_id String
  first_name      String
  last_name       String
  birth_year      Int @default(2012)
  birth_month     Int?
  birth_day       Int?
  photo           String?
  timezone  String @default("UTC")

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  user          User?          @relation(fields: [user_id], references: [user_id])
  organization  Organization   @relation(fields: [organization_id], references: [organization_id])
  parents       PlayerParent[]
  teams         TeamPlayer[]
  matches       MatchPlayer[]
  match_events  MatchEvent[]

  @@index([last_name, first_name, organization_id])
  @@map("players")
}

model PlayerParent {
  player_id              String
  parent_id              String
  relationship           String  @default("mother")
  email_notifications    Boolean @default(false)
  whatsapp_notifications Boolean @default(false)

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  player Player @relation(fields: [player_id], references: [player_id])
  user   User   @relation(fields: [parent_id], references: [user_id])

  @@unique([player_id, relationship, parent_id])
  @@map("player_parents")
}

model Team {
  team_id         String   @id @default(cuid())
  organization_id String
  league_id       String
  name            String
  age_group       String
  division        String
  description     String?
  status          String  @default("active")

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  organization Organization @relation(fields: [organization_id], references: [organization_id])
  league       League       @relation(fields: [league_id], references: [league_id])
  members      TeamMember[]
  matches      Match[]
  players      TeamPlayer[]
  trainings    Training[]

  @@unique([organization_id, league_id, age_group, division])
  @@map("teams")
}

model TeamMember {
  team_member_id  String   @id @default(cuid())
  organization_id String
  team_id         String
  user_id         String
  role            String   @default("team manager")
  description     String?
  status          String   @default("active")

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  team         Team       @relation(fields: [team_id], references: [team_id])
  user         User       @relation(fields: [user_id], references: [user_id])

  @@unique([organization_id, team_id, user_id])
  @@index([organization_id, role, team_id])
  @@index([organization_id, team_id, role])
  @@map("team_members")
}

model TeamPlayer {
  team_member_id  String   @id @default(cuid())
  organization_id String
  team_id         String
  player_id       String
  jersey_number   String @default("19")
  position        String?
  description     String?
  status          String   @default("active")

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  team         Team       @relation(fields: [team_id], references: [team_id])
  player       Player       @relation(fields: [player_id], references: [player_id])
  trainings    Training[]

  @@unique([organization_id, team_id, player_id])
  @@index([player_id])
  @@index([team_id])
  @@map("team_players")
}

model Training {
  training_id     String   @id @default(cuid())
  organization_id String
  league_id       String
  team_id         String
  session_start   String
  session_end     String
  timezone        String   @default("UTC")
  location        String
  status          String   @default("active")
  description     String?

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  team         Team       @relation(fields: [team_id], references: [team_id])
  players      TeamPlayer[]

  @@unique([league_id, team_id, session_start])
  @@index([organization_id, session_start])
  @@index([team_id, session_start])
  @@index([league_id])
  @@map("trainings")
}

model Match {
  match_id  String   @id @default(cuid())
  organization_id String
  league_id       String
  team_id         String
  opponent        String
  home_or_away    String?
  match_date      String
  match_timezone  String @default("UTC")
  match_location  String
  status          String   @default("active")
  match_result    String   @default("win")
  goals_for       Int?
  goals_against   Int?
  match_video     String?
  description     String?

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  team         Team       @relation(fields: [team_id], references: [team_id])
  league       League       @relation(fields: [league_id], references: [league_id])
  players      MatchPlayer[]
  events       MatchEvent[]

  @@unique([league_id, team_id, match_date])
  @@index([team_id, opponent])
  @@index([team_id, match_date])
  @@index([league_id, match_date])
  @@map("matches")
}

model MatchPlayer {
  match_player_id  String   @id @default(cuid())
  match_id        String
  player_id       String
  jersey_number   String @default("19")
  goals           Int?
  assists         Int?
  yellow_cards    Int?
  red_cards       Int?
  tackles         Int?
  saves           Int?
  position        String? @default("rw")
  total_minutes   Int?
  status          String   @default("draft")
  description     String?

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  match        Match       @relation(fields: [match_id], references: [match_id])
  player       Player      @relation(fields: [player_id], references: [player_id])

  @@unique([match_id, player_id])
  
  @@index([goals])
  @@index([assists])
  @@index([tackles])
  @@index([saves])
  @@index([jersey_number, position])
  @@map("match_players")
}

model MatchEvent {
  match_event_id  String   @id @default(cuid())
  match_id        String
  player_id       String
  event_type      String   @default("subbed_out")
  event_time      String
  description     String?

  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  deleted_at DateTime?

  match        Match       @relation(fields: [match_id], references: [match_id])
  player       Player       @relation(fields: [player_id], references: [player_id])

  @@unique([match_id, player_id])
  @@index([match_id, event_time])
  @@index([player_id, event_time])
  @@index([event_type, event_time])
  @@map("match_events")
}